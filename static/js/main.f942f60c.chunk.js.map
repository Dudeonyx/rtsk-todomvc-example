{"version":3,"sources":["components/TodoTextInput.tsx","components/Header.tsx","reducers/todos.ts","reducers/visibilityFilter.ts","containers/Header.tsx","components/Link.tsx","containers/FilterLink.ts","components/Footer.tsx","constants/TodoFilters.ts","components/TodoItem.tsx","components/TodoList.tsx","selectors/index.ts","containers/VisibleTodoList.ts","components/MainSection.tsx","containers/MainSection.tsx","components/App.tsx","index.tsx"],"names":["TodoTextInput","state","text","_this","props","handleSubmit","e","currentTarget","value","trim","which","onSave","newTodo","setState","handleChange","target","handleBlur","react_default","a","createElement","className","classnames","edit","this","editing","new-todo","type","placeholder","autoFocus","onBlur","onChange","onKeyDown","Component","Header","_ref","addTodo","TodoTextInput_TodoTextInput","length","createSlice","slice","cases","_","push","id","reduce","maxId","todo","Math","max","completed","deleteTodo","filter","editTodo","_ref2","Object","slicedToArray","forEach","completeTodo","completeAllTodos","areAllMarked","every","clearCompleted","initialState","todos","reducer","todoActions","actions","getTodos","selectors","getSlice","setVisibilityFilter","visibilityFilter","getVisibilityFilter","mapDispatchToProps","connect","Link","active","children","setFilter","selected","style","cursor","onClick","ownProps","dispatch","FILTER_TITLES","_FILTER_TITLES","defineProperty","Footer","activeCount","completedCount","onClearCompleted","itemWord","keys","map","key","FilterLink","TodoItem","handleDoubleClick","handleSave","element","_this2","_this$props","checked","onDoubleClick","TodoList","filteredTodos","TodoItem_TodoItem","assign","getVisibleTodos","createSelector","t","Error","getCompletedTodoCount","count","VisibleTodoList","bindActionCreators","MainSection","todosCount","readOnly","containers_VisibleTodoList","components_Footer","App","containers_Header","containers_MainSection","configureStore","store","render","es","components_App","document","getElementById"],"mappings":"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","file":"static/js/main.f942f60c.chunk.js","sourcesContent":["import React, {\n  Component,\n  ReactEventHandler,\n  MouseEvent,\n  KeyboardEvent,\n  ChangeEvent,\n  FocusEvent,\n} from 'react';\nimport classnames from 'classnames';\n\ninterface ITodoTextInput {\n  onSave: (text: string) => any;\n  text?: string;\n  placeholder?: string;\n  editing?: boolean;\n  newTodo?: boolean;\n}\n\nexport default class TodoTextInput extends Component<ITodoTextInput> {\n  public state = {\n    text: this.props.text || '',\n  };\n\n  public handleSubmit = (e: KeyboardEvent<HTMLInputElement>) => {\n    const text = e.currentTarget.value.trim();\n    if (e.which === 13) {\n      this.props.onSave(text);\n      if (this.props.newTodo) {\n        this.setState({ text: '' });\n      }\n    }\n  };\n\n  public handleChange = (e: ChangeEvent<HTMLInputElement>) => {\n    this.setState({ text: e.target.value });\n  };\n\n  public handleBlur = (e: FocusEvent<HTMLInputElement>) => {\n    if (!this.props.newTodo) {\n      this.props.onSave(e.target.value);\n    }\n  };\n\n  public render() {\n    return (\n      <input\n        className={classnames({\n          edit: this.props.editing,\n          'new-todo': this.props.newTodo,\n        })}\n        type=\"text\"\n        placeholder={this.props.placeholder}\n        autoFocus={true}\n        value={this.state.text}\n        onBlur={this.handleBlur}\n        onChange={this.handleChange}\n        onKeyDown={this.handleSubmit}\n      />\n    );\n  }\n}\n","import React, { FunctionComponent } from 'react';\nimport TodoTextInput from './TodoTextInput';\n\ninterface IHeaderProps {\n  addTodo: (text: string) => any;\n}\n\nconst Header: FunctionComponent<IHeaderProps> = ({ addTodo }) => (\n  <header className=\"header\">\n    <h1>todos</h1>\n    <TodoTextInput\n      newTodo={true}\n      onSave={(text: string) => {\n        if (text.length !== 0) {\n          addTodo(text);\n        }\n      }}\n      placeholder=\"What needs to be done?\"\n    />\n  </header>\n);\n\nexport default Header;\n","import { createSlice } from '@redux-ts-starter-kit/core';\nimport { IStore } from '..';\n\nexport interface ITodoObject {\n  text: string;\n  completed: boolean;\n  id: number;\n}\n\nconst initialState: ITodoObject[] = [\n  {\n    text: 'Use Redux',\n    completed: false,\n    id: 0,\n  },\n];\n\nexport const {\n  reducer: todos,\n  actions: todoActions,\n  selectors: { getSlice: getTodos },\n} = createSlice({\n  slice: 'todos',\n  cases: {\n    addTodo: (state, text: string, _: IStore) => {\n      state.push({\n        id: state.reduce((maxId, todo) => Math.max(todo.id, maxId), -1) + 1,\n        completed: false,\n        text,\n      });\n    },\n    deleteTodo: (state, id: number) => state.filter(todo => todo.id !== id),\n    editTodo: (state, [id, text,]: [number, string]) => {\n      state.forEach(todo => todo.id === id && (todo.text = text));\n    },\n    completeTodo: (state, id: number) => {\n      state.forEach(\n        todo => todo.id === id && (todo.completed = !todo.completed),\n      );\n    },\n    completeAllTodos: (state, _: never) => {\n      const areAllMarked = state.every(todo => todo.completed);\n      state.forEach(todo => {\n        todo.completed = !areAllMarked;\n      });\n    },\n    clearCompleted: (state, _: never) =>\n      state.filter(todo => todo.completed === false),\n  },\n  initialState,\n});\n","import { createSlice } from '@redux-ts-starter-kit/core';\nimport { IStore } from '..';\n\nexport const {\n  actions: { setVisibilityFilter },\n  reducer: visibilityFilter,\n  selectors: { getSlice: getVisibilityFilter },\n} = createSlice({\n  slice: 'visibilityFilter',\n  cases: {\n    setVisibilityFilter: (state, filter: string, _: IStore) => filter,\n  },\n  initialState: 'show_all',\n});\n\nexport default visibilityFilter;\n","import { connect } from 'react-redux';\nimport Header from '../components/Header';\nimport { todoActions } from '../reducers';\n\nconst mapDispatchToProps = { addTodo: todoActions.addTodo };\nexport default connect(\n  null,\n  mapDispatchToProps,\n)(Header);\n","import React, { FunctionComponent, ReactNode } from 'react';\nimport classnames from 'classnames';\n\ninterface ILinkProps {\n  active: boolean;\n  children: ReactNode;\n  setFilter: () => void;\n}\n\nconst Link: FunctionComponent<ILinkProps> = ({\n  active,\n  children,\n  setFilter,\n}) => (\n  <a\n    className={classnames({ selected: active })}\n    style={{ cursor: 'pointer' }}\n    onClick={() => setFilter()}\n  >\n    {children}\n  </a>\n);\n\nexport default Link;\n","import { connect } from 'react-redux';\nimport Link from '../components/Link';\nimport { IStore } from '..';\nimport { Dispatch } from '@redux-ts-starter-kit/core';\nimport { setVisibilityFilter } from '../reducers';\n\nconst mapStateToProps = (state: IStore, ownProps: { filter: string }) => ({\n  active: ownProps.filter === state.visibilityFilter,\n});\n\nconst mapDispatchToProps = (\n  dispatch: Dispatch,\n  ownProps: { filter: string },\n) => ({\n  setFilter: () => {\n    dispatch(setVisibilityFilter(ownProps.filter));\n  },\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(Link);\n","import React, { FunctionComponent, MouseEventHandler } from 'react';\nimport FilterLink from '../containers/FilterLink';\nimport {\n  SHOW_ALL,\n  SHOW_COMPLETED,\n  SHOW_ACTIVE,\n} from '../constants/TodoFilters';\n\ninterface IFooterProps {\n  activeCount: number;\n  completedCount: number;\n  onClearCompleted: MouseEventHandler;\n}\n\nconst FILTER_TITLES = {\n  [SHOW_ALL]: 'All',\n  [SHOW_ACTIVE]: 'Active',\n  [SHOW_COMPLETED]: 'Completed',\n};\n\nconst Footer: FunctionComponent<IFooterProps> = props => {\n  const { activeCount, completedCount, onClearCompleted } = props;\n  const itemWord = activeCount === 1 ? 'item' : 'items';\n  return (\n    <footer className=\"footer\">\n      <span className=\"todo-count\">\n        <strong>{activeCount || 'No'}</strong> {itemWord} left\n      </span>\n      <ul className=\"filters\">\n        {Object.keys(FILTER_TITLES).map(filter => (\n          <li key={filter}>\n            <FilterLink filter={filter}>\n              {(FILTER_TITLES as any)[filter]}\n            </FilterLink>\n          </li>\n        ))}\n      </ul>\n      {!!completedCount && (\n        <button className=\"clear-completed\" onClick={onClearCompleted}>\n          Clear completed\n        </button>\n      )}\n    </footer>\n  );\n};\n\nexport default Footer;\n","export const SHOW_ALL = 'show_all'\nexport const SHOW_COMPLETED = 'show_completed'\nexport const SHOW_ACTIVE = 'show_active'\n","import React, { Component } from 'react';\nimport classnames from 'classnames';\nimport TodoTextInput from './TodoTextInput';\nimport { todoActions, ITodoObject } from '../reducers';\n\ninterface ITodoItem {\n  todo: ITodoObject;\n  editTodo: typeof todoActions['editTodo'];\n  deleteTodo: typeof todoActions['deleteTodo'];\n  completeTodo: typeof todoActions['completeTodo'];\n}\n\nexport default class TodoItem extends Component<ITodoItem> {\n  public state = {\n    editing: false,\n  };\n\n  public handleDoubleClick = () => {\n    this.setState({ editing: true });\n  };\n\n  public handleSave = (id: number, text: string) => {\n    if (text.length === 0) {\n      this.props.deleteTodo(id);\n    } else {\n      this.props.editTodo([id, text,]);\n    }\n    this.setState({ editing: false });\n  };\n\n  public render() {\n    const { todo, completeTodo, deleteTodo } = this.props;\n\n    let element;\n    if (this.state.editing) {\n      element = (\n        <TodoTextInput\n          text={todo.text}\n          editing={this.state.editing}\n          onSave={text => this.handleSave(todo.id, text)}\n        />\n      );\n    } else {\n      element = (\n        <div className=\"view\">\n          <input\n            className=\"toggle\"\n            type=\"checkbox\"\n            checked={todo.completed}\n            onChange={() => completeTodo(todo.id)}\n          />\n          <label onDoubleClick={this.handleDoubleClick}>{todo.text}</label>\n          <button className=\"destroy\" onClick={() => deleteTodo(todo.id)} />\n        </div>\n      );\n    }\n\n    return (\n      <li\n        className={classnames({\n          completed: todo.completed,\n          editing: this.state.editing,\n        })}\n      >\n        {element}\n      </li>\n    );\n  }\n}\n","import React, { FunctionComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport TodoItem from './TodoItem';\nimport { todoActions } from '../reducers';\n\ninterface IFilteredTodos {\n  id: number;\n  completed: boolean;\n  text: string;\n}\n\ninterface ITodoListProps {\n  filteredTodos: IFilteredTodos[];\n  actions: typeof todoActions;\n}\n\nconst TodoList: FunctionComponent<ITodoListProps> = ({\n  filteredTodos,\n  actions,\n}) => (\n  <ul className=\"todo-list\">\n    {filteredTodos.map(todo => (\n      <TodoItem key={todo.id} todo={todo} {...actions} />\n    ))}\n  </ul>\n);\n\nexport default TodoList;\n","import { createSelector } from '@redux-ts-starter-kit/core';\nimport {\n  SHOW_ALL,\n  SHOW_COMPLETED,\n  SHOW_ACTIVE,\n} from '../constants/TodoFilters';\nimport { getVisibilityFilter } from '../reducers/visibilityFilter';\nimport { getTodos } from '../reducers/todos';\n\nexport const getVisibleTodos = createSelector(\n  [getVisibilityFilter, getTodos,],\n  (visibilityFilter, todos) => {\n    switch (visibilityFilter) {\n      case SHOW_ALL:\n        return todos;\n      case SHOW_COMPLETED:\n        return todos.filter(t => t.completed);\n      case SHOW_ACTIVE:\n        return todos.filter(t => !t.completed);\n      default:\n        throw new Error('Unknown filter: ' + visibilityFilter);\n    }\n  },\n);\n\nexport const getCompletedTodoCount = createSelector(\n  [getTodos,],\n  todos =>\n    todos.reduce((count, todo) => (todo.completed ? count + 1 : count), 0),\n);\n","import { connect } from 'react-redux';\nimport TodoList from '../components/TodoList';\nimport { getVisibleTodos } from '../selectors';\nimport { IStore } from '..';\nimport { todoActions } from '../reducers';\nimport { Dispatch } from '@redux-ts-starter-kit/core';\nimport { bindActionCreators } from '@redux-ts-starter-kit/core';\n\nconst mapStateToProps = (state: IStore) => ({\n  filteredTodos: getVisibleTodos(state),\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  actions: bindActionCreators(todoActions, dispatch),\n});\n\nconst VisibleTodoList = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(TodoList);\n\nexport default VisibleTodoList;\n","import React, { FunctionComponent } from 'react';\nimport Footer from './Footer';\nimport VisibleTodoList from '../containers/VisibleTodoList';\nimport { todoActions } from '../reducers';\n\ninterface IMainSectionProps {\n  todosCount: number;\n  completedCount: number;\n  actions: typeof todoActions;\n}\n\nconst MainSection: FunctionComponent<IMainSectionProps> = ({\n  todosCount,\n  completedCount,\n  actions,\n}) => (\n  <section className=\"main\">\n    {!!todosCount && (\n      <span>\n        <input\n          className=\"toggle-all\"\n          type=\"checkbox\"\n          checked={completedCount === todosCount}\n          readOnly={true}\n        />\n        <label onClick={actions.completeAllTodos} />\n      </span>\n    )}\n    <VisibleTodoList />\n    {!!todosCount && (\n      <Footer\n        completedCount={completedCount}\n        activeCount={todosCount - completedCount}\n        onClearCompleted={actions.clearCompleted}\n      />\n    )}\n  </section>\n);\n\nexport default MainSection;\n","import { connect } from 'react-redux';\nimport MainSection from '../components/MainSection';\nimport { getCompletedTodoCount } from '../selectors';\nimport { todoActions } from '../reducers';\nimport { IStore } from '..';\nimport { Dispatch } from '@redux-ts-starter-kit/core';\nimport { bindActionCreators } from '@redux-ts-starter-kit/core';\n\nconst mapStateToProps = (state: IStore) => ({\n  todosCount: state.todos.length,\n  completedCount: getCompletedTodoCount(state),\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  actions: bindActionCreators(todoActions, dispatch),\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(MainSection);\n","import React from 'react';\nimport Header from '../containers/Header';\nimport MainSection from '../containers/MainSection';\n\nconst App = () => (\n  <div>\n    <Header />\n    <MainSection />\n  </div>\n);\n\nexport default App;\n","import React from 'react';\nimport { render } from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './components/App';\nimport { todos, visibilityFilter } from './reducers';\nimport { configureStore } from '@redux-ts-starter-kit/core';\nimport 'todomvc-app-css/index.css';\n\nexport interface IStore {\n  todos: ReturnType<typeof todos>;\n  visibilityFilter: ReturnType<typeof visibilityFilter>;\n}\n\nconst [store,] = configureStore<IStore>({\n  reducer: {\n    todos,\n    visibilityFilter,\n  },\n});\n\nrender(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}